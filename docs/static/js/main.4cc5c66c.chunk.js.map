{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategory","useState","value","setvalue","onSubmit","e","preventDefault","trim","length","categoryRef","type","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgR","useFetchGifs","GifExpertApp","props","categories","setcategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EA/BK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,YACnB,EAA0BC,mBAAU,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OACG,sBAAMC,SAVY,SAACC,GAClBA,EAAEC,iBAEGJ,EAAMK,OAAOC,OAAS,IACvBR,GAAa,SAAAS,GAAW,OAAKP,GAAL,mBAAeO,OACvCN,EAAS,MAKd,SACK,uBACAO,KAAK,OACLR,MAASA,EACTS,SAlBkB,SAACN,GACvBF,EAASE,EAAEO,OAAOV,a,+BCRpBW,EAAM,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAELC,EAFK,0FAEqFC,UAAUH,GAF/F,qBAGQI,MAAOF,GAHf,cAGLG,EAHK,gBAMUA,EAAKC,OANf,uBAMJC,EANI,EAMJA,KANI,kBAQJA,EAAKC,KAAM,SAAAC,GAAQ,IAAD,EACrB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SAZ/B,2CAAH,sDAqBGH,ICnBFe,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,sBAAKa,UAAY,yCAAjB,UACG,qBAAKC,IAAMd,EAAKe,IAAMN,EAAQT,IAAMA,IACpC,4BAAIS,QCFFO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAItB,ECJwB,SAACA,GAGzB,MAA0Bb,mBAAS,CAC/BoB,KAAM,GAAIY,SAAS,IADvB,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OARAC,qBAAU,WACNvB,EAAOC,GAAUuB,MAAM,SAAAC,GACnBH,EAAS,CAACd,KAAKiB,EAAML,SAAQ,SAEjC,CAAEnB,IAICoB,EDVwBK,CAAazB,GAAhCY,EAAZ,EAAOL,KAAaY,EAApB,EAAoBA,QACpB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,oCAAd,SAAoDf,IACjDmB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,8CAAf,SAEYH,EAAOJ,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,eAEaA,GADCA,EAAIC,aEoBnCgB,EAhCM,SAAAC,GAEnB,MAAsCxC,mBAAS,CAAC,SAAhD,mBAAOyC,EAAP,KAAqBC,EAArB,KAOE,OACI,eAAC,WAAD,WACI,gDACA,uBACA,cAAC,EAAD,CAAa3C,YAAc2C,EAA3B,eACA,uBAEA,6BAEQD,EAAWpB,KAAK,SAAAR,GAAQ,OAClB,cAAC,EAAD,CAEEA,SAAaA,GADLA,YCbrB8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAG1BX,M","file":"static/js/main.4cc5c66c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ( {setCategory}) => {\n    const [value, setvalue] = useStateÂ ('');\n\n    const handleInputchange = (e) => {\n        setvalue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( value.trim().length > 2 ) {\n            setCategory( categoryRef => [value, ...categoryRef]);\n            setvalue('');\n\n        }\n    }\n    return (\n       <form onSubmit = {handleSubmit}>\n            <input \n            type=\"text\" \n            value= { value } \n            onChange = { handleInputchange }\n         />\n       </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n\n","const getGif = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=QXwQtusV1QtA8XGd3ycg1vJ5UNYZcFBx&q=${ encodeURI(category)}&limit=5`;\n    const resp = await fetch (url);\n\n\n    const {data} = await resp.json();\n\n    return data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    \n\n\n}\n\nexport default getGif;","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className = \"card animate__animated animate__fadeIn\">\n           <img src= {url} alt= {title}  url= {url}/>\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    \n   \n\n    const {data:images, loading} = useFetchGifs(category)\n    return (\n        <Fragment>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category}</h3>\n              {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}  \n              <div className=\"card-grid animate__animated animate__fadeIn\">\n                    \n                        { images.map( (img) => (\n                                <GifGridItem \n                                        key= {img.id}  \n                                        { ...img}\n                                        />\n                        ))}\n                    \n                </div> \n        </Fragment>\n       \n    )\n}\n","import { useEffect, useState } from 'react';\nimport getGif from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n\n   \n    const [state, setstate] = useState({\n        data: [], loading: true\n    })\n    useEffect(() => {\n        getGif(category).then( imgR => {\n            setstate({data:imgR, loading:false})\n        } );\n     }, [ category ]);\n\n \n\n    return state;\n}","import React, { useState, Fragment } from 'react';\n\nimport  AddCategory  from  './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = props => {\n\n  const [categories  , setcategories] = useState(['goku']);\n \n//   const handleAdd = () =>{\n//         const nuevaCategory = 'Goku';\n//         setcategories([...categories,nuevaCategory]);\n//   }\n\n    return (\n        <Fragment>\n            <h2>Gif Expert APP</h2>\n            <hr />\n            <AddCategory setCategory= {setcategories}> </AddCategory>\n            <hr />\n            {/* <button onClick = { handleAdd} > Add Category</button> */}\n            <ol>\n                {\n                    categories.map( category =>  \n                        ( <GifGrid  \n                            key = { category }\n                            category = { category } />)\n                    )\n                }\n              \n            </ol>\n        </Fragment>\n    )\n}\n\n\n\nexport default GifExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}